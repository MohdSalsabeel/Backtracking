#include <iostream>
#include <vector>
using namespace std;

void addSolution(vector<vector<int>>& board, vector<vector<int>>& ans, int n) {
    vector<int> temp;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            temp.push_back(board[i][j]);
        }
    }
    ans.push_back(temp);
}

bool isSafe(int row, int col, vector<vector<int>>& board, int n) {
    int x = row, y = col;

    // Check for same row
    while (y >= 0) {
        if (board[x][y] == 1) {  // Fixed '=' to '=='
            return false;
        }
        y--;
    }

    x = row;
    y = col;
    // Upper left diagonal
    while (x >= 0 && y >= 0) {
        if (board[x][y] == 1) {
            return false;
        }
        x--;
        y--;
    }

    x = row;
    y = col;
    // Lower left diagonal
    while (x < n && y >= 0) {
        if (board[x][y] == 1) {
            return false;
        }
        x++;
        y--;
    }

    return true;
}

void solve(int col, vector<vector<int>>& ans, vector<vector<int>>& board, int n) {
    if (col == n) {
        addSolution(board, ans, n);
        return;
    }

    for (int row = 0; row < n; row++) {
        if (isSafe(row, col, board, n)) {
            board[row][col] = 1;
            solve(col + 1, ans, board, n);
            board[row][col] = 0;  // Backtrack
        }
    }
}

int main() {
    cout << "Enter the number of board: ";
    int n;
    cin >> n;
    
    if (n <= 0) {
        cout << "Invalid board size!" << endl;
        return 1;
    }

    vector<vector<int>> board(n, vector<int>(n, 0));
    vector<vector<int>> ans;
    
    solve(0, ans, board, n);
    
    cout << "Solutions:" << endl;
    for (auto solution : ans) {
        for (int i = 0; i < n * n; i++) {
            if (i % n == 0) cout << endl;
            cout << solution[i] << " ";
        }
        cout << endl << "-----------" << endl;
    }

    return 0;
}

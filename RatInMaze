

bool isSafe(int newX, int newY, vector<vector<int>> &arr, vector<vector<bool>>& visited, int n) {
	if ((newX >= 0 && newX < n) && (newY >= 0 && newY < n) && arr[newX][newY] == 1 && visited[newX][newY] != 1) {
		return true;
	}
	else {
		return false;
	}
}

void solve(int x, int y, vector<vector<int>> &arr, int n, vector<string> &ans, vector<vector<bool>> &vis, string path) {
	if (x == n-1 && y == n-1) {
		ans.push_back(path);
		return;
	}

	// 4 movement D,L,R,U

	if (isSafe(x+1,y,arr,vis,n)) {
		vis[x][y] = 1;
		//path = path + 'D';
		solve(x + 1, y, arr,n, ans, vis, path+'D');
		vis[x][y] = 0;
	}

	if (isSafe(x , y+1, arr, vis, n)) {
		vis[x][y] = 1;
		//path = path + 'R';
		solve(x , y+1, arr, n, ans, vis, path+'R');
		vis[x][y] = 0;
	}

	if (isSafe(x -1, y, arr, vis, n)) {
		vis[x][y] = 1;
		//path = path + 'U';
		solve(x - 1, y, arr, n, ans, vis, path+'U');
		vis[x][y] = 0;
	}

	if (isSafe(x , y-1, arr, vis, n)) {
		vis[x][y] = 1;
		//path = path + 'L';
		solve(x  , y-1, arr, n, ans, vis, path+'L');
		vis[x][y] = 0;
	}
}


int main() {

	int n = 4;
	vector<vector<int>> matrix;
	matrix = { {1,0,0,0},
		{1,1,0,0},
		{1,1,0,0},
		{0,1,1,1} };

	vector<string> ans;
	vector<vector<bool>> visited(n, vector<bool>(n, 0));
	string path = "";

	solve(0, 0, matrix, n, ans, visited, path);
	cout << path << endl;
}
